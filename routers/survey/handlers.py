import asyncio

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from keyboads import (
    get_confirm_button,
    get_keyboard,
    get_start_keyboard,
    get_support_button,
)
from settings import settings
from utils import calculate_summ, find_quantity

from .states import Support, Survey

router = Router(name=__name__)


@router.message(F.text == "üíé –ü–æ–∫—É–ø–∫–∞ –≥–µ–º–æ–≤ üíé")
async def start_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer(
        text="–í—ã–±–µ—Ä–∏ 1 –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        reply_markup=get_keyboard(),
    )
    await state.set_state(Survey.quantity)


@router.message(F.text == "üì• –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üì•")
async def support_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer(
        text="üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ –æ–Ω —Å—Ä–∞–∑—É —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏—Ç, –∫–∞–∫ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è üìù",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(Support.report)


@router.message(Support.report)
async def report_handler(message: types.Message, state: FSMContext) -> None:
    await message.bot.send_sticker(
        chat_id=message.chat.id,
        sticker="CAACAgIAAxkBAAEM9x1nDRaGogtRz"
        "n2Pqc3Zsdq6wnavMQACSAIAAladvQoc9XL43CkU0DYE",
    )
    for admin in settings.admin_ids:
        await message.bot.forward_message(
            chat_id=admin,
            from_chat_id=message.chat.id,
            message_id=message.message_id,
        )
    await message.answer(text="üì© –Ø —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ê–¥–º–∏–Ω—É! üì©")
    await state.clear()


@router.message(F.text.contains("1000 –≥–µ–º–æ–≤"))
@router.message(F.text.contains("5000 –≥–µ–º–æ–≤"))
@router.message(F.text.contains("10000 –≥–µ–º–æ–≤"))
@router.message(F.text.contains("25000 –≥–µ–º–æ–≤"))
@router.message(F.text.contains("50000 –≥–µ–º–æ–≤"))
@router.message(F.text.contains("100000 –≥–µ–º–æ–≤"))
@router.message(F.text.isdigit(), Survey.quantity)
async def quantity_handler(message: types.Message, state: FSMContext) -> None:
    print(message.text)
    quantity: int = 0
    if isinstance(message.text, str):
        quantity = find_quantity(message.text)
    if quantity > 999:
        price = str(calculate_summ(quantity))
        await state.update_data(quantity=quantity, price=price)
        await state.set_state(Survey.nickname)
        await message.answer(
            text=f"–û—Ç–ª–∏—á–Ω–æ!\n–¢—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å {quantity} —à—Ç. –∑–∞ {price} —Ä—É–±–ª–µ–π"
        )
        await asyncio.sleep(0.3)
        await message.answer(
            text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ –≤ TDD,"
            " –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ, —Ç—É–¥–∞ –≤ Post Office –ø—Ä–∏–¥—É—Ç –≥–µ–º—ã",
            reply_markup=get_support_button(),
        )
    elif quantity < 1000:
        await message.answer(text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≥–µ–º–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ - 1000")


@router.message(Survey.quantity)
async def unknown_type_handler(message: types.Message) -> None:
    await message.answer(
        text="–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≥–µ–º–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å, –∞ —è –ø–æ—Å—á–∏—Ç–∞—é —Å—É–º–º—É"
    )


@router.message(F.text, Survey.nickname)
async def nickname_handler(message: types.Message, state: FSMContext) -> None:
    await state.update_data(nickname=message.text)
    data = await state.get_data()
    await message.answer(
        text=f"–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å!\n\n"
        f"üí≥ –°–±–µ—Ä–±–∞–Ω–∫: 234234234 üí≥"
        f"\nüí∞{data['price']} —Ä—É–±–ª–µ–π.üí∞"
    )
    await message.answer(
        text="–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—à—å –ø–æ–∫—É–ø–∫—É –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üòé –û–ø–ª–∞—Ç–∏–ª! üòé'",
        reply_markup=get_confirm_button(),
    )
    await state.set_state(Survey.confirm)


@router.message(~F.text, Survey.nickname)
async def invalid_nickname_handler(message: types.Message) -> None:
    await message.answer(
        text="‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ –∏–∑ TDD, —Ç—É–¥–∞ –Ω–∞ Post Office –ø—Ä–∏–¥—É—Ç –≥–µ–º—ã ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è",
        reply_markup=get_support_button(),
    )


@router.message(F.text == "üòé –û–ø–ª–∞—Ç–∏–ª! üòé", Survey.confirm)
async def confirm_handler(message: types.Message, state: FSMContext) -> None:
    await message.answer(
        text="üéâ–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!üéâ\n–¢–æ–≤–∞—Ä –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç, —Å 08:00 –¥–æ 23:00",
        reply_markup=get_start_keyboard(),
    )
    await message.bot.send_sticker(
        chat_id=message.chat.id,
        sticker=time_sticker,
    )
    data = await state.get_data()
    for admin in settings.admin_ids:
        await message.bot.send_message(
            chat_id=admin,
            text=f"Nickname TDD: {data['nickname']}\n"
            f"Nickname TG: {message.from_user.full_name}\n"
            f"User ID: {message.from_user.id}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"
            f"–ö –æ–ø–ª–∞—Ç–µ: {data['price']}",
        )
    await state.clear()
